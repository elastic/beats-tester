#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    BASE_DIR = 'src'
    PIPELINE_LOG_LEVEL = 'INFO'
    APM_URL_BASE = "${params.APM_URL_BASE}"
    BEATS_URL_BASE = "${params.BEATS_URL_BASE}"
    VERSION = "${params.VERSION}"
    HOME = "${WORKSPACE}"
    NEW_CHANGES = 'false'
  }
  options {
    timeout(time: 4, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    quietPeriod(10)
    rateLimitBuilds(throttle: [count: 4, durationName: 'hour', userBoost: true])
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
    // disable upstream trigger on a PR basis
    upstream("Beats/beats/${ env.JOB_BASE_NAME.startsWith('PR-') ? 'none' : env.JOB_BASE_NAME }")
  }
  parameters {
    string(name: 'APM_URL_BASE', defaultValue: 'https://storage.googleapis.com/apm-ci-artifacts/jobs/snapshots', description: 'The location where the APM packages should be downloaded from')
    string(name: 'BEATS_URL_BASE', defaultValue: 'https://storage.googleapis.com/beats-ci-artifacts/snapshots', description: 'The location where the Beats packages should be downloaded from')
    string(name: 'VERSION', defaultValue: '8.0.0-SNAPSHOT', description: 'The package version to test (modify the job configuration to add a new version)')
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
        dir("${BASE_DIR}"){
          sh(label: 'Get snapshot metadata', script: ".ci/scripts/fetch-metadata.sh ${VERSION}")
          // Archive metadata to be compared in the upstream setup stage.
          archiveArtifacts(allowEmptyArchive: false, artifacts: 'metadata.txt')
        }
      }
    }
    stage('Upstream setup'){
      when {
        anyOf {
          triggeredBy cause: 'UpstreamCause'
        }
      }
      steps {
        dir("${BASE_DIR}"){
          copyArtifacts(projectName: "${JOB_NAME}", filter: 'metadata.txt', target: 'previous', optional: true)
          whenTrue(fileExists('previous/metadata.txt')) {
            script {
              env.NEW_CHANGES = sh(label: 'Compare metadata', returnStdout: true,
                                  script: 'cmp metadata.txt previous/metadata.txt && echo "false" || echo "true"')?.trim()
              whenTrue(env.NEW_CHANGES.equals('true')) {
                def buildId = sh(label: 'Set build id', returnStdout: true,
                                 script: '.ci/scripts/get-build-id.sh metadata.txt')?.trim()
                env.APM_URL_BASE = "https://staging.elastic.co/${buildId}/downloads/apm-server"
                env.BEATS_URL_BASE = "https://staging.elastic.co/${buildId}/downloads/beats"
              }
            }
          }
        }
      }
    }
    stage('Test Hosts'){
      when {
        beforeAgent true
        anyOf {
          not { triggeredBy cause: 'UpstreamCause' }
          expression {
            def ret = env.NEW_CHANGES == 'true' && isUpstreamTrigger()
            if(!ret){
              currentBuild.result = 'NOT_BUILT'
              currentBuild.description = 'The build has been skipped'
              currentBuild.displayName = "#${BUILD_NUMBER}-(Skipped)"
              echo('If upstream caused and no change then the build is skipped')
            }
            return ret
          }
        }
      }
      matrix {
        // TODO: when the infra is ready with the 'nested-virtualization' then we can use that label
        // agent { label 'nested-virtualization' }
        agent { label 'metal' }
        axes {
          axis {
            name 'GROUPS'
            // TODO: when the infra is ready with the 'nested-virtualization' then we can split in stages
            // values 'centos', 'debian', 'sles', 'windows'
            values 'centos debian sles windows'
          }
        }
        stages {
          stage('Test'){
            options { skipDefaultCheckout() }
            steps {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                sh(label: 'make batch',
                  script: """#!/bin/bash
                    echo "beats_url_base: ${BEATS_URL_BASE}" > run-settings-jenkins.yml
                    echo "apm_url_base: ${APM_URL_BASE}" >> run-settings-jenkins.yml
                    echo "version: ${VERSION}" >> run-settings-jenkins.yml
                    RUN_SETTINGS=jenkins make batch""")
              }
            }
            post {
              always {
                dir("${BASE_DIR}"){
                  junit(allowEmptyResults: true, keepLongStdio: true, testResults: "logs/*.xml")
                  archiveArtifacts(allowEmptyArchive: true, artifacts: 'logs/**')
                  sh(label: 'make clean', script: 'make clean')
                }
              }
              cleanup {
                deleteDir()
              }
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}
