# Installs the packages

- name: 'Remove {{ beat_pkg_name }} rpm if it exists'
  yum: name={{ beat_pkg_name }} state=absent lock_timeout=900
  retries: 3
  delay: 10
  when: ansible_os_family == "RedHat"
  ignore_errors: yes 

- name: 'Remove {{ beat_pkg_name }} rpm if it exists'
  zypper: name={{ beat_pkg_name }} state=absent
  retries: 3
  delay: 10
  when: ansible_os_family == "Suse"

- name: 'Remove {{ beat_pkg_name }} deb if it exists'
  apt: name={{ beat_pkg_name }} state=absent
  retries: 3
  delay: 10
  when: ansible_os_family == "Debian"

- name: Install Debs (apt)
  apt: deb={{workdir}}/{{beat_pkg}} state=present
  retries: 3
  delay: 10
  when:
    - ansible_os_family == "Debian"
    - ansible_distribution_major_version != "6"

# XXX: Workaround for https://github.com/ansible/ansible/issues/31471.
- name: Install Debs (dpkg)
  command: dpkg -i {{workdir}}/{{beat_pkg}}
  retries: 3
  delay: 10
  when:
    - ansible_os_family == "Debian"
    - ansible_distribution_major_version == "6"

- name: Install RPMs
  yum: name={{workdir}}/{{beat_pkg}} state=present lock_timeout=900
  retries: 3
  delay: 10
  when: ansible_os_family == "RedHat"

- name: Install RPMs
  block:
    - rpm_key: state=present key=https://packages.elastic.co/GPG-KEY-elasticsearch
    - zypper: name="{{ workdir }}/{{ beat_pkg }}" state=present
  when: ansible_os_family == "Suse"

- name: Untar (darwin)
  shell: chdir={{workdir}} tar xzvf {{beat_pkg}}
  when: ansible_os_family == "Darwin"

- name: Make sure installdir doesn't exist (windows)
  win_file: path={{installdir}} state=absent
  when: ansible_os_family == "Windows"

- name: Unzip (windows)
  win_unzip:
    src:  "{{workdir}}\\{{beat_pkg}}"
    dest: "{{workdir}}"
  when: ansible_os_family == "Windows"

- name: Rename install dir for nightlies
  script: mv.ps1 -path "{{ workdir }}\\{{ beat_name }}-*-windows" -dest "{{ installdir }}"
  when: ansible_os_family == "Windows"

- name: Stat install directory (windows)
  win_stat: path={{installdir}}
  register: installdir_stat
  when: ansible_os_family == "Windows"

- name: Check that installdir was created (windows)
  assert:
    that:
      - "installdir_stat.stat.exists"
      - "installdir_stat.stat.isdir"
  when: ansible_os_family == "Windows"
